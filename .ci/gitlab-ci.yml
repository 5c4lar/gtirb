variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - case "$(uname -s)" in
        CYGWIN*) systeminfo;;
        *) docker info;;
    esac

stages:
  - check-format
  - build
  - test
  - deploy
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build -f .ci/Dockerfile.formatter -t formatter .
    - docker run -v $(pwd):/gt/gtirb formatter

.build-template: &build
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/-*//g' )
    - export LOCAL_IMAGE_BASE=$(echo ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} |  tr A-Z a-z)
    # Build & test
    - docker build -f .ci/Dockerfile.${OS} -t ${LOCAL_IMAGE_BASE} --build-arg CXX_COMPILER=${COMPILER} --build-arg CPACK_GENERATOR=${CPACK_GENERATOR} .
    - docker run ${LOCAL_IMAGE_BASE} bash -c 'cd /gt/gtirb/build ; ctest -V'
    # Build & test with capstone
    - CAPSTONE_OS=$(echo ${OS} | sed 's/[[:digit:]]//g')
    - docker build -f .ci/Dockerfile.add-capstone-${CAPSTONE_OS} --build-arg CXX_COMPILER=${COMPILER} --build-arg BASE_IMAGE=${LOCAL_IMAGE_BASE} .
    - docker tag ${LOCAL_IMAGE_BASE} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME}:${PUSH_TAG};
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME}:${PUSH_TAG};

.windows-build-template: &windows-build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - GTIRB-*-win64
  script:
    # Build & test
    - rm -rf build CMakeCache.txt CMakeFiles CMakeScripts
    - mkdir build
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_PREFIX_PATH=\"C:\\Program Files (x86)\\protobuf\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DPYTHON=\"C:\\Python38\\python.exe\" .."
    - PATH="$PATH;C:\\Program Files\\CMake\\bin" cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - cd build && cmd.exe /C "C:\\PROGRA~1\\CMake\\bin\\ctest.exe -V"
    # Build & test with capstone
    - cd ..
    # Install capstone
    - pushd $HOME
    - mkdir /cygdrive/C/capstone-$BUILD_TYPE
    - curl -L https://github.com/aquynh/capstone/archive/4.0.1.tar.gz -o 4.0.1.tar.gz
    - tar xf 4.0.1.tar.gz
    - cd capstone-4.0.1
    - mkdir build
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=C:\\capstone-${BUILD_TYPE} .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"
    - popd
    # Build GTIRB
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DCAPSTONE=C:\\capstone-${BUILD_TYPE}\\lib\\capstone.lib -DCMAKE_PREFIX_PATH=\"C:\\Program Files (x86)\\protobuf\" -DCMAKE_CXX_FLAGS=\"/I C:\\capstone-${BUILD_TYPE}\\include\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - ./bin/TestGTIRB.exe
    # Generate and upload installer
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cpack.exe -G \"ZIP\""
    - ZIP_FILE=(GTIRB-*-win64.zip)
    - BASE_DIRECTORY="${ZIP_FILE%.*}"
    - unzip $ZIP_FILE
    - cp bin/$(echo "gtirb$(echo $BUILD_TYPE | sed 's/Debug/d/;s/RelWithDebInfo//').pdb") $BASE_DIRECTORY/bin/
    - cp -r $BASE_DIRECTORY ../

# This does not work: Ubuntu 14.04 has gcc 4.8.4, which is too old.
#
# build-ubuntu14:
#   stage: build
#   variables:
#     OS: 'ubuntu14'
#     COMPILER: 'g++'
#   <<: *build

build-ubuntu16-gcc7:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang++'
  <<: *build

build-ubuntu18-gcc7:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-ubuntu18-clang:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang++'
  <<: *build

build-arch-gcc:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    CPACK_GENERATOR: 'TGZ'
  <<: *build

build-arch-clang:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'clang++'
  <<: *build

build-windows-msvc-debug:
  tags:
    - gtirb-windows
  variables:
    BUILD_TYPE: 'Debug'
  <<: *windows-build

build-windows-msvc-relwithdebinfo:
  tags:
    - gtirb-windows
  variables:
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *windows-build

cleanup:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
  script:
    - export LOCAL_IMAGE_NAME=$(echo ${LOCAL_IMAGE_NAME} |  tr A-Z a-z)
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu16-gcc7
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu16-clang
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu18-gcc7
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu18-clang
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-gcc
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-clang
    - docker rmi -f ${LOCAL_IMAGE_NAME}-test-install
  when: always

test-install:
  stage: test
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/-*//g' )
    - export LOCAL_IMAGE=$(echo ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} |  tr A-Z a-z)
    - docker build -f .ci/Dockerfile.test-install -t ${LOCAL_IMAGE_NAME}-${CI_JOB_NAME} --build-arg IMAGE=$LOCAL_IMAGE .

.linux-installer-template: &linux-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./*.$PACKAGE_EXTENSION
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/-*//g' )
    - export CONTAINER_FILE=$(mktemp -d)/cidfile
    - export LOCAL_IMAGE_BASE=$(echo ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} |  tr A-Z a-z)
    - docker create --cidfile="${CONTAINER_FILE}" ${LOCAL_IMAGE_BASE}
    - if [ "$OS" = "arch" ];
      then
        export PKGFILE="gtirb-git-$(git describe --abbrev=8 --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s|gt/pristine/||')-1-x86_64.pkg.tar.xz";
        docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb/build/${PKGFILE} ./${PKGFILE};
      elif [[ "$OS" =~ ubuntu1[68] ]];
      then
        docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb/build/libgtirb.deb ./libgtirb.deb;
        docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb/build/libgtirb-dev.deb ./libgtirb-dev.deb;
        [ $OS = 'ubuntu18' ] && docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb/build/python3-gtirb.deb ./python3-gtirb.deb;
      fi
    - docker container rm -f $(cat ${CONTAINER_FILE})
    - rm -rf $(dirname ${CONTAINER_FILE})
    - docker build -f .ci/Dockerfile.test-${OS}-packages --build-arg CXX_COMPILER=${COMPILER} .;

debian-installer-ubuntu16:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    PACKAGE_EXTENSION: 'deb'
  <<: *linux-installer

debian-installer-ubuntu18:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PACKAGE_EXTENSION: 'deb'
  <<: *linux-installer

package-arch:
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    PACKAGE_EXTENSION: 'pkg.tar.xz'
  <<: *linux-installer

python-wheel:
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-*-py*-none-any.whl
  script:
    - CID=$(docker create ${LOCAL_IMAGE_NAME}-ubuntu18-gcc7)
    - docker cp $CID:/gt/gtirb/build/python/dist python-dist
    - cp python-dist/*.whl ./
    - docker container rm -f $CID

upload-to-pypi:
  stage: deploy
  only:
   - master
  script:
    - GTIRB_IMAGE=${LOCAL_IMAGE_NAME}-ubuntu18-gcc7
    - GTIRB_VERSION=$(docker run $GTIRB_IMAGE python3 -c "import gtirb; print(gtirb.__version__)")
    - echo $GTIRB_VERSION
    - RESPONSE_CODE=$(curl -Ls -o /dev/null -w "%{http_code}" https://pypi.org/project/gtirb/${GTIRB_VERSION}/)
    - echo $RESPONSE_CODE
    - if [ "$RESPONSE_CODE" = "404" ];
      then
        docker run $GTIRB_IMAGE bash -c
          "pip3 install twine --upgrade && cd /gt/gtirb/build/python && twine check dist/* && twine upload dist/* -u __token__ -p $PYPI_API_KEY";
      fi
