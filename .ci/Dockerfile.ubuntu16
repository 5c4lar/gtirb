FROM ubuntu:16.04

ARG CMAKE_VERSION=3.9
ARG PROTOBUF_VERSION=3.1.0-0ubuntu1~maarten0
ARG CXX_COMPILER=g++-7

ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH

# Use bash for more convenient variable substitution syntax
SHELL ["/bin/bash", "-c"]

# install apt packages
RUN apt-get -y update && \
    apt-get -y install software-properties-common && \
    add-apt-repository ppa:jonathonf/gcc-7.1 && \
    apt-get -y update && \
    apt-get -y install apt-transport-https autoconf build-essential curl \
        default-jdk g++-7 gcc-7 git libtool python3-setuptools wget \
        sbcl cl-quicklisp emacs-nox slime paredit-el

RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add - && \
    add-apt-repository 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main' && \
    apt-get -y update && \
    apt-get -y install clang-8 && \
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 60 \
                        --slave /usr/bin/clang++ clang++ /usr/bin/clang++-8

RUN add-apt-repository ppa:mhier/libboost-latest && \
    add-apt-repository ppa:maarten-fonville/protobuf && \
    apt-get -y update && \
    apt-get -y install libboost1.67-dev libprotobuf-dev=$PROTOBUF_VERSION protobuf-compiler=$PROTOBUF_VERSION

# Install CMake
RUN curl -SL https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.0-Linux-x86_64.tar.gz \
    |tar -xz --strip-components=1 -C /usr/local

# Common-Lisp specific setup.
# RUN sbcl --load /usr/share/cl-quicklisp/quicklisp.lisp \
#          --eval '(quicklisp-quickstart:install)' \
#          --eval '(let ((ql-util::*do-not-prompt* t)) (ql:add-to-init-file))'
# RUN sbcl --eval '(ql:quickload :protobuf)' --eval '(sb-ext:exit)'
# RUN git clone https://github.com/brown/protobuf /root/quicklisp/local-projects/protobuf
# RUN cd /root/quicklisp/local-projects/protobuf/protoc/lisp && INSTALL_ROOT=/usr/ PROTOC_ROOT=/usr/ make install
# RUN git clone https://github.com/eschulte/simpler-documentation-template /root/quicklisp/local-projects/simpler-documentation-template

# Build GTIRB
COPY . /gt/gtirb/

# Ensure all Common Lisp dependencies are installed before the build.
# Works around the fact that you can't run multiple Quicklisp dependency installs in parallel as done by 'make -j'.
# RUN rm -rf /gt/gtirb/build /gt/gtirb/CMakeCache.txt /gt/gtirb/CMakeFiles /gt/gtirb/CMakeScripts
# RUN sbcl --eval '(asdf:initialize-source-registry `(:source-registry (:tree "/gt/gtirb/cl") :inherit-configuration))' \
#         --eval '(ql:quickload :gtirb/test)' --eval '(sb-ext:exit)'

# Build GTIRB.
RUN mkdir build
WORKDIR /gt/gtirb/build/
RUN cmake ../ -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)"
RUN make -j

# Run CPack.
ARG CPACK_GENERATOR=""
RUN if [ ! -z "${CPACK_GENERATOR}" ] ; then cd /gt/gtirb/build && cpack -G "${CPACK_GENERATOR}"; fi

# Set up envionment for interactive use.
ENV PATH=/gt/gtirb/build/bin:$PATH
